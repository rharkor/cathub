name: Deployment

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      force_deploy_api:
        description: "Force the deployment of the api"
        required: false
        type: boolean
        default: false
      force_deploy_app:
        description: "Force the deployment of the app"
        required: false
        type: boolean
        default: false

env:
  TURBO_RUN_FILTER: ${{ github.event.before }}

jobs:
  security:
    name: TruffleHog Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified

  diffs:
    name: Diffs
    runs-on: ubuntu-latest
    outputs:
      changed-api: ${{ steps.changed-api.outputs.result }}
      changed-app: ${{ steps.changed-app.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
      - name: Changeset
        id: changeset
        run: |
          if [ -z "$TURBO_RUN_FILTER" ]; then
            content=`npx -y turbo build --filter="...[HEAD^]" --dry-run=json`
          else
            content=`npx -y turbo build --filter="...[$TURBO_RUN_FILTER]" --dry-run=json`
          fi
          echo 'result<<EOF' >> $GITHUB_OUTPUT
          echo $content >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo $content > $GITHUB_WORKSPACE/result.json
      - name: Upload Result as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: changeset-result
          path: ${{ github.workspace }}/result.json
      - name: Changed api?
        id: changed-api
        if: ${{ contains(fromJSON(steps.changeset.outputs.result).packages, '@cathub/api') }}
        run: |
          echo "result=true" >> $GITHUB_OUTPUT
      - name: Changed app?
        id: changed-app
        if: ${{ contains(fromJSON(steps.changeset.outputs.result).packages, '@cathub/app') }}
        run: |
          echo "result=true" >> $GITHUB_OUTPUT

  parse_branch_name:
    name: Parse branch name
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.parse_branch_name.outputs.branch }}
    steps:
      - name: Parse branch name
        id: parse_branch_name
        run: |
          echo "branch=$(echo ${GITHUB_REF##*/} | tr -d -)" >> $GITHUB_OUTPUT

  deploy_api:
    name: Deploy api
    runs-on: ubuntu-latest
    needs:
      - diffs
      - parse_branch_name
    env:
      APP_NAME: api
    if: ${{ needs.diffs.outputs.changed-api == 'true' || inputs.force_deploy_api }}
    steps:
      - name: Deploy api summary
        run: |
          echo "### Deploying $APP_NAME ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "Found changes in $APP_NAME compared to this commit $TURBO_RUN_FILTER" >> $GITHUB_STEP_SUMMARY
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create env
        run: |
          echo "ENV=production" >> apps/api/.env
          echo "LOGGER_ENV=production" >> apps/api/.env
          echo "DATABASE_PRISMA_URL=${{ secrets.DATABASE_PRISMA_URL }}" >> apps/api/.env
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> apps/api/.env
          echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> apps/api/.env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> apps/api/.env
          echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> apps/api/.env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> apps/api/.env
          echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> apps/api/.env
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> apps/api/.env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> apps/api/.env

      - name: Login to docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_KEY }}
          registry: ${{ secrets.REGISTRY_URL }}

      - name: Cache for Turbo
        uses: rharkor/caching-for-turbo@v1.6

      - name: Build docker image
        timeout-minutes: 10
        run: |
          docker build --build-arg TURBO_TEAM=$TURBO_TEAM --build-arg TURBO_TOKEN=$TURBO_TOKEN --build-arg TURBO_API=$TURBO_API --network=host -t ${{ secrets.REGISTRY_URL }}/cathub/api:latest -f apps/api/docker/Dockerfile .

      - name: Push docker image
        timeout-minutes: 5
        run: |
          docker push ${{ secrets.REGISTRY_URL }}/cathub/api:latest

      - name: Push docker compose
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.SOURCE_PATH }}/$APP_NAME"
          scp -P ${{ secrets.SSH_PORT }} docker/${GITHUB_REF##*/}/docker-compose.$APP_NAME.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ vars.SOURCE_PATH }}/$APP_NAME/docker-compose.yml

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: APP_NAME
          script: |
            cd ${{ vars.SOURCE_PATH }}/$APP_NAME
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_KEY }} ${{ secrets.REGISTRY_URL }}
            docker compose pull
            docker compose up -d

  deploy_app:
    name: Deploy app
    runs-on: ubuntu-latest
    needs:
      - diffs
      - parse_branch_name
    env:
      APP_NAME: app
    if: ${{ needs.diffs.outputs.changed-app == 'true' || inputs.force_deploy_app }}
    steps:
      - name: Deploy app summary
        run: |
          echo "### Deploying $APP_NAME ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "Found changes in $APP_NAME compared to this commit $TURBO_RUN_FILTER" >> $GITHUB_STEP_SUMMARY
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create env
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> apps/app/.env
          echo "NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}" >> apps/app/.env

      - name: Login to docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_KEY }}
          registry: ${{ secrets.REGISTRY_URL }}

      - name: Cache for Turbo
        uses: rharkor/caching-for-turbo@v1.6

      - name: Build docker image
        timeout-minutes: 10
        run: |
          docker build --build-arg TURBO_TEAM=$TURBO_TEAM --build-arg TURBO_TOKEN=$TURBO_TOKEN --build-arg TURBO_API=$TURBO_API --network=host -t ${{ secrets.REGISTRY_URL }}/cathub/app:latest -f apps/app/docker/Dockerfile .

      - name: Push docker image
        timeout-minutes: 5
        run: |
          docker push ${{ secrets.REGISTRY_URL }}/cathub/app:latest

      - name: Push docker compose
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.SOURCE_PATH }}/$APP_NAME"
          scp -P ${{ secrets.SSH_PORT }} docker/${GITHUB_REF##*/}/docker-compose.$APP_NAME.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ vars.SOURCE_PATH }}/$APP_NAME/docker-compose.yml

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: APP_NAME
          script: |
            cd ${{ vars.SOURCE_PATH }}/$APP_NAME
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_KEY }} ${{ secrets.REGISTRY_URL }}
            docker compose pull
            docker compose up -d
