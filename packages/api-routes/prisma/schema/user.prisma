model User {
    id               String    @id @default(cuid())
    name             String?
    email            String    @unique
    emailVerified    DateTime?
    profilePictureId String?   @unique
    profilePicture   File?     @relation(fields: [profilePictureId], references: [id], onDelete: SetNull)
    image            String?

    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    FileUploading FileUploading[]

    firstname   String?
    lastname    String?
    bio         String?
    Cat         Cat[]
    PostComment PostComment[]
    Post        Post[]
}

model Cat {
    id                String  @id @default(cuid())
    name              String
    sexe              String
    description       String
    contact_ig        String?
    contact_whats_app String?
    contact_snap      String?
    profilePictureId  String? @unique
    profilePicture    File?   @relation(fields: [profilePictureId], references: [id], onDelete: SetNull, name: "FileCats")
    File              File[]

    User   User?   @relation(fields: [userId], references: [id])
    userId String?
    Post   Post[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}
